#!/usr/bin/env python3
"""Calculate estimated emissions from a single job on CREATE HPC.

The grid carbon density is fetched from the carbonintensity.org.uk website.

EPCC, 2024
"""

import argparse
import json
import sys
import urllib.error
import urllib.request
from datetime import datetime, timedelta

from utils import get_sacct_tokens, read_node_data, round_to_nearest_half_hour

CI_DATA_DIR = "/work/z19/shared/carbonintensity"
# Path to CSV with embodied carbon values for nodes

SCOPE2_AND_3_EMISSIONS_DIR = "/scratch/prj/emissions/data/cleaned_nodes_filled_embodied.csv"

# Define the estimated average carbon value
node_carbon = read_node_data(SCOPE2_AND_3_EMISSIONS_DIR)

# Base definitions for Scope 3 emissions
NODE_LIFETIME = 6              # years

# Base definitions on Scope 2 emissions
MEAN_NODE_POWER_DRAW = 0.41    # kW
MIN_NODE_POWER_DRAW = 0.2      # kW
OTHER_FRACTION = 0.15          # Fraction to add for non-compute node energy use
OVERHEAD_FRACTION = 0.10       # Fraction to add for plant overheads
MEAN_CORE_POWER_DRAW = MEAN_NODE_POWER_DRAW / 128    # based on 128 cores per node for ARCHER2
MIN_CORE_POWER_DRAW = MIN_NODE_POWER_DRAW / 128      # based on 128 cores per node for ARCHER2

# Definitions for querying web API
LOCATION = "EC1A"
DATEFORMAT_IN = "%Y-%m-%dT%H:%M:%S"
DATEFORMAT_OUT = "%Y-%m-%dT%H:%MZ"
TIME_DELTA = timedelta(minutes=30)

# Comparison values
UK_HOUSE = 7.397  # kWh/day  https://www.ofgem.gov.uk/average-gas-and-electricity-usage
STEAK = 49.89 # kgCO2e/100g https://www.nationalfoodstrategy.org/the-report/
TRANSA_FLIGHT = 500.0 # kgCO2e/passanger (one way) https://www.theguardian.com/environment/ng-interactive/2019/jul/19/carbon-calculator-how-taking-one-flight-emits-as-much-as-many-people-do-in-a-year
DRIVING = 0.269 # kgCO2e/mile https://www.statista.com/statistics/1233409/carbon-footprint-of-cars-by-type-uk/

# All values are for 100 g
food_d = {
        "Beef": 12.47, # kgCO2e/100g https://www.nationalfoodstrategy.org/the-report/ , ~25 g protein per 100 g beef
        "Chicken": 1.43, # kgCO2e/100g https://www.nationalfoodstrategy.org/the-report/ , ~25 g protein per 100 g chicken
        "Avocado": 0.18, # kgCO2e/100g https://www.theecoexperts.co.uk/blog/avocados-bad-for-environment
        "Chickpeas": 0.04, # kgCO2e/100g https://apps.carboncloud.com/climatehub/product-reports/id/87516661589
        }

# CLI argument parsing

parser = argparse.ArgumentParser(
        description="Compute estimated emissions from a Slurm job. Includes Scope 2 and Scope 3 emissions. If the Slurm job contains energy consumption then this is used to compute Scope 2 emissions, if energy data is not present in Slurm, the mean power draw of compute nodes is used to estimate emissions.",
        epilog="The carbon density for Scope 2 emissions is taken as the value for the location of CREATE HPC at the start of the job from carbonintensity.org.uk. Scope 3 emissions are computed based on the amount of resource used by the job (e.g. kgCO2e/nodeh) and are calculated as the total Scope 3 emissions from the service divided byt the total number of nodeh available over the projected lifetime of the service.\n",
        )
parser.add_argument("jobid", type=str, nargs=1, help="JobID of the Slurm job to compute emissions for.")
parser.add_argument("--json", dest="jsonOutput", action="store_true", default=False, help="Output in JSON format rather than human-readable text.")
parser.add_argument("--comparison", type=str, dest="compare", action="store", default="none", help='Specify emissions comparisons to print as a comma-separated list. Valid vales "food", "other", "none". "none" suppresses reporting of emissions comparisons. Default is "none".')
parser.add_argument("--cisource", type=str, dest="cisource", action="store", default="cache", help='Specify how to source the carbon intensity value for indicative Scope 2 emissions. "cache" gets values from cache on CREATE HPC to avoid flooding carbonintensity.org.uk with requests and allow use on compute nodes. "ciwebsite" fetches values direct from carbonintensity.org.uk website. Default is "cache".')
args = parser.parse_args()

jobid = args.jobid[0]

# Get job details

try:
    tokens = get_sacct_tokens(jobid)
    print("Tokens:", tokens)
except (RuntimeError, ValueError) as e:
    print(f"Error: {e}")
    sys.exit(1)
    
# Slurm token unpacking

job_start_s = tokens[2]
job_nodes = int(tokens[3])
job_runtime = int(tokens[4])
job_node_list = tokens[5]
job_cpu_cores = int(tokens[6])
try:
    job_energy = int(tokens[7])
except ValueError:
    job_energy = 0
    
# Convert runtime into node-hours

job_coreh = (job_cpu_cores * job_runtime) / 3600.0
compute_kwh = 0.0

# Parse node name
job_node_list = tokens[5]  # This is the NodeList from Slurm
first_node_name = job_node_list.split(",")[0].strip()

# Lookup in dictionary
node_info = node_carbon.get(first_node_name)

if not node_info:
    print(f"Error: node '{first_node_name}' not found in carbon dictionary.")
    sys.exit(1)

node_cpu_cores = node_info["cpu_cores"]
node_embodied = node_info["embodied"]
scope3_per_coreh = node_embodied / node_cpu_cores / (24 * 365 * NODE_LIFETIME)
scope3_per_coreh = scope3_per_coreh * 1000 # convert to gCO2e

print(f"Node name: {first_node_name}")
print(f"Embodied carbon for this node: {node_embodied} kgCO2e")

# calculate compute kWh based on estimated mean CPU power draw of ARCHER2
# later we can replace this with per-node average power draw figures
compute_kwh = job_coreh * MEAN_CORE_POWER_DRAW
is_estimated = True

# Compute other contributions to energy use
other_kwh = compute_kwh * OTHER_FRACTION
overhead_kwh = (compute_kwh + other_kwh) * OVERHEAD_FRACTION
estimated_kwh = compute_kwh + other_kwh + overhead_kwh

ci_value = 0.0
if args.cisource == "ciwebsite":
   # Estimate Scope 2 emissions from job energy use and historic carbon density
   # Get the start time in the right format to query the carbonintensity API
   job_start = datetime.strptime(job_start_s, DATEFORMAT_IN)
   job_end = job_start + TIME_DELTA
   job_start_url = job_start.strftime(DATEFORMAT_OUT)
   job_end_url = job_end.strftime(DATEFORMAT_OUT)

   # Query carbonintensity to get the JSON information
   ci_url = f"https://api.carbonintensity.org.uk/regional/intensity/{job_start_url}/{job_end_url}/postcode/{LOCATION}"
   ci_response = None
   try:
      ci_response = urllib.request.urlopen(ci_url)
   except urllib.error.HTTPError as e:
      print(e)
      sys.exit(1)

   # Parse the JSON retrieved from the website
   ci_json = ci_response.read()
   ci_d = json.loads(ci_json)
   ci_value = ci_d["data"]["data"][0]["intensity"]["forecast"]
else:
   # Extract CI value at the job start time
   #   The CI value is taken from cached values held on CREATE HPC to avoid
   #   flooding the carbonintensity.org.uk website with requests. The cached
   #   values are captured every night in a file per day with half-hour
   #   interval data in a CSV file.
   job_start = datetime.strptime(job_start_s, DATEFORMAT_IN)

   s_year = job_start.year
   s_month = job_start.month
   s_day = job_start.day

   ci_csv = f"{CI_DATA_DIR}/{s_year}/{s_month:02d}/{s_year}{s_month:02d}{s_day:02d}_ci.csv"
   try:
      csv_file = open(ci_csv)
      # Round to nearest half hour to match interval for data in log files
      rounded_time = round_to_nearest_half_hour(job_start)
      # Convert rounded time to the format in the log files so we can
      #   search for it
      job_start_log = rounded_time.strftime(DATEFORMAT_OUT)
      for line in csv_file:
          if job_start_log in line:
              tokens = line.split(",")
              ci_value = float(tokens[1])
   except Exception as err:
       print(str(err))
       sys.exit(1)
       
# Emissions calculations 

# Scope 2
scope2_emissions = (estimated_kwh * ci_value) / 1000.0

# Scope 3
scope3_emissions = (job_coreh * scope3_per_coreh) / 1000.0

# Total
total_emissions = scope3_emissions
total_emissions_ukgrid = scope2_emissions + scope3_emissions
scope2_percent = 100.0 * (scope2_emissions / total_emissions_ukgrid)
scope3_percent = 100.0 * (scope3_emissions / total_emissions_ukgrid)

if args.jsonOutput:
   # construct dictionary for JSON output
   job_d = {}
   job_d["JobID"] = jobid
   job_d["Start"] = job_start
   job_d["Nodes"] = job_nodes
   job_d["Runtime"] = job_runtime

   res_d = {}
   res_d["ResourceUsed"] = f"{job_coreh:.3f}"
   res_d["ResourceUnit"] = "coreh"
   job_d["Resource"] = res_d

   energy_d = {}
   energy_d["ComputeEnergyUsed"] = f"{compute_kwh:.3f}"
   energy_d["OtherEnergyUsed"] = f"{other_kwh:.3f}"
   energy_d["OverheadEnergyUsed"] = f"{overhead_kwh:.3f}"
   energy_d["TotalEnergyUsed"] = f"{estimated_kwh:.3f}"
   energy_d["EnergyUnits"] = "kWh"
   if is_estimated:
      energy_d["EnergyCalc"] = "Estimated"
   else:
      energy_d["EnergyCalc"] = "Measured"
   job_d["Energy"] = energy_d

   emissions_d = {}
   emissions_d["Scope2Emissions"] = f"{0.0:.3f}"
   emissions_d["Scope2EmissionsUKGrid"] = f"{scope2_emissions:.3f}"
   emissions_d["Scope2EmissionsUnit"] = "kgCO2e"
   emissions_d["Scope3Emissions"] = f"{scope3_emissions:.3f}"
   emissions_d["Scope3EmissionsUnit"] = "kgCO2e"
   emissions_d["TotalEmissions"] = f"{scope3_emissions:.3f}"
   emissions_d["TotalEmissionsUnit"] = "kgCO2e"
   emissions_d["CarbonIntensityUKGrid"] = f"{ci_value:.3f}"
   emissions_d["CarbonIntensityUKGridUnit"] = "gCO2e/kWh"
   job_d["Emissions"] = emissions_d
   json_s = json.dumps(job_d, indent=4, separators=(",", ": "))
   print(json_s)
else:
   # Human-readable formatted output
   marker_s = ""
   if is_estimated:
      marker_s = "(*)"
   print("\n#####################################################################")
   print("# CREATE HPC job emissions estimate")
   print("#")
   print("# Notes:")
   print("#  * Estimates provided for interest only")
   print(f"#  * Scope 3 emissions estimates based on {NODE_LIFETIME} years service length.")
   print("#  * Scope 3 emissions estimates include compute nodes, storage,")
   print("#    interconnect switches")
   print("#")
   print("######################################################################")

   print("\n  Job details:")
   print(f"                       Job ID: {jobid:>20s}")
   print(f"                        Start: {job_start_s:>20s}")
   print(f"                        Nodes: {job_nodes:20d}")
   print(f"                    CPU cores: {job_cpu_cores:20d}")
   print(f"                      Runtime: {job_runtime:20d} s")
   print(f"                           CU: {job_coreh:20.3f}")
   print(f"      Compute node energy use: {compute_kwh:20.3f} kWh{marker_s}")
   print(f"    Other hardware energy use: {other_kwh:20.3f} kWh (estimated)")
   print(f"          Overhead energy use: {overhead_kwh:20.3f} kWh (estimated)")
   print(f"             Total energy use: {estimated_kwh:20.3f} kWh (estimated)")

   print("\n  Emissions estimates:")
   print(f"      Scope 2: {0.0:10.3f} kgCO2e (CREATE HPC is on 100% certified")
   print("                renewable energy contract so scope 2 emissions are zero)")
   print(f"      Scope 3: {scope3_emissions:10.3f} kgCO2e ({scope3_per_coreh:.1f} gCO2e/CU)")
   print(f"        Total: {total_emissions:10.3f} kgCO2e\n")
   print("      Indicative emissions estimates for UK national grid energy mix")
   print("      in London at start of job if CREATE HPC was not using")
   print("      renewable energy")
   print(f"          Scope 2: {scope2_emissions:10.3f} kgCO2e ({estimated_kwh:.3f} kWh{marker_s}, {ci_value:.1f} gCO2e/kWh)")
   print(f"          Scope 3: {scope3_emissions:10.3f} kgCO2e ({scope3_per_coreh:.1f} gCO2e/CU)")
   print(f"            Total: {total_emissions_ukgrid:10.3f} kgCO2e")
   print("\n      Scope 2 carbon intensity values from carbonintensity.org.uk")
   if is_estimated:
      print("\n       (*) Energy use missing from Slurm data, estimated using mean")
      print("             power draw of compute node")

   # Food comparisons
   if "food" in args.compare:
      steaks = 100 * (total_emissions/STEAK)
      print("\n   Emissions from job approximately equivalent to following food consumption:")
      print(f"        |{'Food':>10s} |{'Emissions (kgCO2e/100g)':>25s} |{'Equivalent to (g)':>18s} |")
      print("        |-----------|--------------------------|-------------------|")
      for food, emission in food_d.items():
          equiv = 100 * total_emissions / emission
          print(f"        |{food:>10s} |{food_d[food]:25.2f} |{equiv:18.2f} |")

   # Other lifestyle comparisons
   if "other" in args.compare:
      house = (UK_HOUSE * ci_value)/1000.0
      print("\n  Emissions from job approximately equivalent to:")
      print(f"        Daily emissions from {total_emissions/house:.1f} houses' electricity use (in S. Scotland)")
      print(f"        Emissions from flying {total_emissions/TRANSA_FLIGHT:.3f} times across the Atlantic ({TRANSA_FLIGHT:.2f} kgCO2e/person)")
      print(f"        Emissions from driving {total_emissions/DRIVING:.1f} miles ({DRIVING:.2f} kgCO2e/mile, average UK car, petrol and diesel very similar)")

   print()

